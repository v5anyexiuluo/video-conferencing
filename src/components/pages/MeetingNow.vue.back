<template>
	<div class="full-height content">
	  <div class="content-main" style="position: relative;">
	  	<div id = "videoWindows" align="center" style="height:90%; background-color: #145">
			<video id="localVideo" style="height: 600px;width: auto;background: white;">
				您的浏览器不支持 video 标签。
			</video>
			<!-- <video style="position: absolute;right: 20px;top: 20px;width: 200px;height: 120px;background: gray;">
				您的浏览器不支持 video 标签。
			</video>
			<video style="position: absolute;right: 20px;top: 200px;width: 200px;height: 120px;background: gray;">
				您的浏览器不支持 video 标签。
			</video> -->
		</div>
		<div id="audioWindows" align="center">
  		</div>
		<el-row class="btn-group" type="flex" align="middle" justify="space-between" style="position: absolute;left: 0px;bottom: 0px;width: 100%;height: 50px;line-height: 50px;">
			<el-col :span="3"><a href="#">邀请+</a></el-col>
			<el-col :span="3"><a href="#">选择主持人</a></el-col>
			<el-col :span="3"><a href="#">共享桌面</a></el-col>
			<el-col :span="3"><a href="#">聊天</a></el-col>
			<el-col :span="3"><a href="#">设置</a></el-col>
			<el-col :span="3"></el-col>
			<el-col :span="3"></el-col>
			<!-- <el-col :span="3"><a @click="onJoinConferenceClicked" href="#">开始</a></el-col> -->
			<el-col :span="3"><a href="#">会议结束</a></el-col>
		</el-row>
	  </div>
	  <div class="content-right">
	  	
	  </div>
	</div>
</template>
<script>
//import xchatkit from 'xchat'
//import $ from 'jquery'
export default {
	data() {
		return {
			user: "15029057276",
			name: "001",
			room: "96685",
			xchatkit: null,
			myjson: JSON.parse ( "{}" )
		}
	},
	created() {
		this.myjson.mgw = "wss://webrtc.myegoo.com.cn/ws";
		this.myjson.turn = "turn:webrtc.myegoo.com.cn";
		this.myjson.fromuser = this.user;
		this.myjson.fromname = this.name;
		this.myjson.chatroom = this.room;
		this.myjson.callback = this.onCallback;
		this.myjson.camera = 0;
		this.myjson.bps = null;
		this.xchatkit = new XChatKit ( this.myjson );
	},
	methods:{
		//加入会议与离开会议
		onJoinConferenceClicked()
		{
			alert("开始会议,会议号:" + this.myjson.chatroom);
	        this.xchatkit.JoinConference(this.myjson);
		},

		//设置会议流
		onEventLocalStream(json)
		{
			console.log("json.stream");
			console.log(json.stream);
			localVideo.srcObject = json.stream;
		},
		onEventPartyAdded(json)
		{
		    //查找页面中是否已存在该用户的画面
		    var obj = document.getElementById ( json.fromuser + json.streamtype );

		    //如果页面中，用户画面已存在，则直接赋新流
		    if ( obj !== null )
		    {
		      obj.srcObject = json.stream;
		      return;
		    }

		    //如果是音频流，则直接创建音频对象
		    if ( "audio" === json.streamtype )
		    {
		        var audio = document.createElement ( "audio" );
		        audio.id = json.fromuser + json.streamtype;
		        audio.srcObject = json.stream;
		        audio.autoplay = "autoplay";
		        audioWindows.appendChild ( audio );
		    }
		    else if ( "video" === json.streamtype )
		    {
		        var video = localVideo.cloneNode();
		        video.id = json.fromuser + json.streamtype;
		        video.style = "position: absolute;right: 20px;top: 20px;width: 200px;height: 120px;background: gray;"
		        video.srcObject = json.stream;
		        videoWindows.appendChild ( video );
		    }
		    else if ( "screen" === json.streamtype )
		    {
		        var video = localVideo.cloneNode();
		        video.id = json.fromuser + json.streamtype;
		        video.style = "width:0px;height:400px;";
		        video.srcObject = json.stream;
		        videoWindows.appendChild ( video );
		    }
		},
		//回调函数
		onCallback(json) {
		    console.log ( json );
		    console.log ( JSON.stringify ( json ) );
		    if ( "EventLocalStream" == json.msgtype )
		        this.onEventLocalStream ( json );
		    else if ( "EventPartyAdded" === json.msgtype )
		        this.onEventPartyAdded ( json );
		    else if ( "EventPartyRemoved" === json.msgtype )
		        this.onEventPartyRemoved ( json );
		    else if ( "EventRDPEnabled" === json.msgtype )
		        this.onEventRDPEnabled ( json );
		    else if ( "EventRDPDisabled" === json.msgtype )
		        this.onEventRDPDisabled ( json );
		    else if ( "EventPartyConnected" === json.msgtype )
		        this.onEventPartyConnected ( json );
		    else if ( "EventPartyDisconnected" === json.msgtype )
		        this.onEventPartyDisconnected ( json );
		},
		//会议加人
		addMember(meetingId, userNickname) {
			axios.put('/meeting/add_member', {
				params:{
					meeting_id: meetingId,
					user_nickname: userNickname
				}
			})
			.then(function(response) {
				if(response.code == 0) {
					console.log(response.msg);
				} else {
					console.log(response.msg);
				}
			})
			.catch(function(error) {
				console.log(error);
			})
		}
	},
	name: 'MeetingNow'
}
</script>
<style scoped>
	.el-main{
		width: 100%;
		height: 100%;
	}
	.el-row{
		margin: 0px;
	}
	.content{
		width: 100%;
		display: flex;
		flex-wrap: nowrap;
	}
	.btn-group a{
		color: gray;
		text-decoration: none;
	}
	.content-main{
		width: 80%;
		border-right: 2px solid gray;
	}
	.content-right{
		width: 20%;
	}
</style>