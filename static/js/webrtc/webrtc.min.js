! function (e) {
    if ("object" == typeof exports && "undefined" != typeof module) module.exports = e();
    else if ("function" == typeof define && define.amd) define([], e);
    else {
        ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).adapter = e()
    }
}(function () {
    return function a(o, s, c) {
        function d(r, e) {
            if (!s[r]) {
                if (!o[r]) {
                    var t = "function" == typeof require && require;
                    if (!e && t) return t(r, !0);
                    if (p) return p(r, !0);
                    var n = new Error("Cannot find module '" + r + "'");
                    throw n.code = "MODULE_NOT_FOUND", n
                }
                var i = s[r] = {
                    exports: {}
                };
                o[r][0].call(i.exports, function (e) {
                    var t = o[r][1][e];
                    return d(t || e)
                }, i, i.exports, a, o, s, c)
            }
            return s[r].exports
        }
        for (var p = "function" == typeof require && require, e = 0; e < c.length; e++) d(c[e]);
        return d
    }({
        1: [
            function (e, t, r) {
                "use strict";
                var p = {
                    generateIdentifier: function () {
                        return Math.random().toString(36).substr(2, 10)
                    }
                };
                p.localCName = p.generateIdentifier(), p.splitLines = function (e) {
                    return e.trim().split("\n").map(function (e) {
                        return e.trim()
                    })
                }, p.splitSections = function (e) {
                    return e.split("\nm=").map(function (e, t) {
                        return (0 < t ? "m=" + e : e).trim() + "\r\n"
                    })
                }, p.matchPrefix = function (e, t) {
                    return p.splitLines(e).filter(function (e) {
                        return 0 === e.indexOf(t)
                    })
                }, p.parseCandidate = function (e) {
                    for (var t, r = {
                        foundation: (t = 0 === e.indexOf("a=candidate:") ? e.substring(12).split(" ") : e.substring(10).split(" "))[0],
                        component: parseInt(t[1], 10),
                        protocol: t[2].toLowerCase(),
                        priority: parseInt(t[3], 10),
                        ip: t[4],
                        port: parseInt(t[5], 10),
                        type: t[7]
                    }, n = 8; n < t.length; n += 2) switch (t[n]) {
                    case "raddr":
                        r.relatedAddress = t[n + 1];
                        break;
                    case "rport":
                        r.relatedPort = parseInt(t[n + 1], 10);
                        break;
                    case "tcptype":
                        r.tcpType = t[n + 1];
                        break;
                    default:
                        r[t[n]] = t[n + 1]
                    }
                    return r
                }, p.writeCandidate = function (e) {
                    var t = [];
                    t.push(e.foundation), t.push(e.component), t.push(e.protocol.toUpperCase()), t.push(e.priority), t.push(e.ip), t.push(e.port);
                    var r = e.type;
                    return t.push("typ"), t.push(r), "host" !== r && e.relatedAddress && e.relatedPort && (t.push("raddr"), t.push(e.relatedAddress), t.push("rport"), t.push(e.relatedPort)), e.tcpType && "tcp" === e.protocol.toLowerCase() && (t.push("tcptype"), t.push(e.tcpType)), e.ufrag && (t.push("ufrag"), t.push(e.ufrag)), "candidate:" + t.join(" ")
                }, p.parseIceOptions = function (e) {
                    return e.substr(14).split(" ")
                }, p.parseRtpMap = function (e) {
                    var t = e.substr(9).split(" "),
                        r = {
                            payloadType: parseInt(t.shift(), 10)
                        };
                    return t = t[0].split("/"), r.name = t[0], r.clockRate = parseInt(t[1], 10), r.numChannels = 3 === t.length ? parseInt(t[2], 10) : 1, r
                }, p.writeRtpMap = function (e) {
                    var t = e.payloadType;
                    return void 0 !== e.preferredPayloadType && (t = e.preferredPayloadType), "a=rtpmap:" + t + " " + e.name + "/" + e.clockRate + (1 !== e.numChannels ? "/" + e.numChannels : "") + "\r\n"
                }, p.parseExtmap = function (e) {
                    var t = e.substr(9).split(" ");
                    return {
                        id: parseInt(t[0], 10),
                        direction: 0 < t[0].indexOf("/") ? t[0].split("/")[1] : "sendrecv",
                        uri: t[1]
                    }
                }, p.writeExtmap = function (e) {
                    return "a=extmap:" + (e.id || e.preferredId) + (e.direction && "sendrecv" !== e.direction ? "/" + e.direction : "") + " " + e.uri + "\r\n"
                }, p.parseFmtp = function (e) {
                    for (var t, r = {}, n = e.substr(e.indexOf(" ") + 1).split(";"), i = 0; i < n.length; i++) r[(t = n[i].trim().split("="))[0].trim()] = t[1];
                    return r
                }, p.writeFmtp = function (t) {
                    var e = "",
                        r = t.payloadType;
                    if (void 0 !== t.preferredPayloadType && (r = t.preferredPayloadType), t.parameters && Object.keys(t.parameters).length) {
                        var n = [];
                        Object.keys(t.parameters).forEach(function (e) {
                            n.push(e + "=" + t.parameters[e])
                        }), e += "a=fmtp:" + r + " " + n.join(";") + "\r\n"
                    }
                    return e
                }, p.parseRtcpFb = function (e) {
                    var t = e.substr(e.indexOf(" ") + 1).split(" ");
                    return {
                        type: t.shift(),
                        parameter: t.join(" ")
                    }
                }, p.writeRtcpFb = function (e) {
                    var t = "",
                        r = e.payloadType;
                    return void 0 !== e.preferredPayloadType && (r = e.preferredPayloadType), e.rtcpFeedback && e.rtcpFeedback.length && e.rtcpFeedback.forEach(function (e) {
                        t += "a=rtcp-fb:" + r + " " + e.type + (e.parameter && e.parameter.length ? " " + e.parameter : "") + "\r\n"
                    }), t
                }, p.parseSsrcMedia = function (e) {
                    var t = e.indexOf(" "),
                        r = {
                            ssrc: parseInt(e.substr(7, t - 7), 10)
                        },
                        n = e.indexOf(":", t);
                    return -1 < n ? (r.attribute = e.substr(t + 1, n - t - 1), r.value = e.substr(n + 1)) : r.attribute = e.substr(t + 1), r
                }, p.getMid = function (e) {
                    var t = p.matchPrefix(e, "a=mid:")[0];
                    if (t) return t.substr(6)
                }, p.parseFingerprint = function (e) {
                    var t = e.substr(14).split(" ");
                    return {
                        algorithm: t[0].toLowerCase(),
                        value: t[1]
                    }
                }, p.getDtlsParameters = function (e, t) {
                    return {
                        role: "auto",
                        fingerprints: p.matchPrefix(e + t, "a=fingerprint:").map(p.parseFingerprint)
                    }
                }, p.writeDtlsParameters = function (e, t) {
                    var r = "a=setup:" + t + "\r\n";
                    return e.fingerprints.forEach(function (e) {
                        r += "a=fingerprint:" + e.algorithm + " " + e.value + "\r\n"
                    }), r
                }, p.getIceParameters = function (e, t) {
                    var r = p.splitLines(e);
                    return {
                        usernameFragment: (r = r.concat(p.splitLines(t))).filter(function (e) {
                            return 0 === e.indexOf("a=ice-ufrag:")
                        })[0].substr(12),
                        password: r.filter(function (e) {
                            return 0 === e.indexOf("a=ice-pwd:")
                        })[0].substr(10)
                    }
                }, p.writeIceParameters = function (e) {
                    return "a=ice-ufrag:" + e.usernameFragment + "\r\na=ice-pwd:" + e.password + "\r\n"
                }, p.parseRtpParameters = function (e) {
                    for (var t = {
                        codecs: [],
                        headerExtensions: [],
                        fecMechanisms: [],
                        rtcp: []
                    }, r = p.splitLines(e)[0].split(" "), n = 3; n < r.length; n++) {
                        var i = r[n],
                            a = p.matchPrefix(e, "a=rtpmap:" + i + " ")[0];
                        if (a) {
                            var o = p.parseRtpMap(a),
                                s = p.matchPrefix(e, "a=fmtp:" + i + " ");
                            switch (o.parameters = s.length ? p.parseFmtp(s[0]) : {}, o.rtcpFeedback = p.matchPrefix(e, "a=rtcp-fb:" + i + " ").map(p.parseRtcpFb), t.codecs.push(o), o.name.toUpperCase()) {
                            case "RED":
                            case "ULPFEC":
                                t.fecMechanisms.push(o.name.toUpperCase())
                            }
                        }
                    }
                    return p.matchPrefix(e, "a=extmap:").forEach(function (e) {
                        t.headerExtensions.push(p.parseExtmap(e))
                    }), t
                }, p.writeRtpDescription = function (e, t) {
                    var r = "";
                    r += "m=" + e + " ", r += 0 < t.codecs.length ? "9" : "0", r += " UDP/TLS/RTP/SAVPF ", r += t.codecs.map(function (e) {
                        return void 0 !== e.preferredPayloadType ? e.preferredPayloadType : e.payloadType
                    }).join(" ") + "\r\n", r += "c=IN IP4 0.0.0.0\r\n", r += "a=rtcp:9 IN IP4 0.0.0.0\r\n", t.codecs.forEach(function (e) {
                        r += p.writeRtpMap(e), r += p.writeFmtp(e), r += p.writeRtcpFb(e)
                    });
                    var n = 0;
                    return t.codecs.forEach(function (e) {
                        e.maxptime > n && (n = e.maxptime)
                    }), 0 < n && (r += "a=maxptime:" + n + "\r\n"), r += "a=rtcp-mux\r\n", t.headerExtensions.forEach(function (e) {
                        r += p.writeExtmap(e)
                    }), r
                }, p.parseRtpEncodingParameters = function (e) {
                    var r, n = [],
                        t = p.parseRtpParameters(e),
                        i = -1 !== t.fecMechanisms.indexOf("RED"),
                        a = -1 !== t.fecMechanisms.indexOf("ULPFEC"),
                        o = p.matchPrefix(e, "a=ssrc:").map(function (e) {
                            return p.parseSsrcMedia(e)
                        }).filter(function (e) {
                            return "cname" === e.attribute
                        }),
                        s = 0 < o.length && o[0].ssrc,
                        c = p.matchPrefix(e, "a=ssrc-group:FID").map(function (e) {
                            var t = e.split(" ");
                            return t.shift(), t.map(function (e) {
                                return parseInt(e, 10)
                            })
                        });
                    0 < c.length && 1 < c[0].length && c[0][0] === s && (r = c[0][1]), t.codecs.forEach(function (e) {
                        if ("RTX" === e.name.toUpperCase() && e.parameters.apt) {
                            var t = {
                                ssrc: s,
                                codecPayloadType: parseInt(e.parameters.apt, 10),
                                rtx: {
                                    ssrc: r
                                }
                            };
                            n.push(t), i && ((t = JSON.parse(JSON.stringify(t))).fec = {
                                ssrc: r,
                                mechanism: a ? "red+ulpfec" : "red"
                            }, n.push(t))
                        }
                    }), 0 === n.length && s && n.push({
                        ssrc: s
                    });
                    var d = p.matchPrefix(e, "b=");
                    return d.length && (d = 0 === d[0].indexOf("b=TIAS:") ? parseInt(d[0].substr(7), 10) : 0 === d[0].indexOf("b=AS:") ? 1e3 * parseInt(d[0].substr(5), 10) * .95 - 16e3 : void 0, n.forEach(function (e) {
                        e.maxBitrate = d
                    })), n
                }, p.parseRtcpParameters = function (e) {
                    var t = {},
                        r = p.matchPrefix(e, "a=ssrc:").map(function (e) {
                            return p.parseSsrcMedia(e)
                        }).filter(function (e) {
                            return "cname" === e.attribute
                        })[0];
                    r && (t.cname = r.value, t.ssrc = r.ssrc);
                    var n = p.matchPrefix(e, "a=rtcp-rsize");
                    t.reducedSize = 0 < n.length, t.compound = 0 === n.length;
                    var i = p.matchPrefix(e, "a=rtcp-mux");
                    return t.mux = 0 < i.length, t
                }, p.parseMsid = function (e) {
                    var t, r = p.matchPrefix(e, "a=msid:");
                    if (1 === r.length) return {
                        stream: (t = r[0].substr(7).split(" "))[0],
                        track: t[1]
                    };
                    var n = p.matchPrefix(e, "a=ssrc:").map(function (e) {
                        return p.parseSsrcMedia(e)
                    }).filter(function (e) {
                        return "msid" === e.attribute
                    });
                    return 0 < n.length ? {
                        stream: (t = n[0].value.split(" "))[0],
                        track: t[1]
                    } : void 0
                }, p.generateSessionId = function () {
                    return Math.random().toString().substr(2, 21)
                }, p.writeSessionBoilerplate = function (e, t) {
                    var r = void 0 !== t ? t : 2;
                    return "v=0\r\no=thisisadapterortc " + (e || p.generateSessionId()) + " " + r + " IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n"
                }, p.writeMediaSection = function (e, t, r, n) {
                    var i = p.writeRtpDescription(e.kind, t);
                    if (i += p.writeIceParameters(e.iceGatherer.getLocalParameters()), i += p.writeDtlsParameters(e.dtlsTransport.getLocalParameters(), "offer" === r ? "actpass" : "active"), i += "a=mid:" + e.mid + "\r\n", e.direction ? i += "a=" + e.direction + "\r\n" : e.rtpSender && e.rtpReceiver ? i += "a=sendrecv\r\n" : e.rtpSender ? i += "a=sendonly\r\n" : e.rtpReceiver ? i += "a=recvonly\r\n" : i += "a=inactive\r\n", e.rtpSender) {
                        var a = "msid:" + n.id + " " + e.rtpSender.track.id + "\r\n";
                        i += "a=" + a, i += "a=ssrc:" + e.sendEncodingParameters[0].ssrc + " " + a, e.sendEncodingParameters[0].rtx && (i += "a=ssrc:" + e.sendEncodingParameters[0].rtx.ssrc + " " + a, i += "a=ssrc-group:FID " + e.sendEncodingParameters[0].ssrc + " " + e.sendEncodingParameters[0].rtx.ssrc + "\r\n")
                    }
                    return i += "a=ssrc:" + e.sendEncodingParameters[0].ssrc + " cname:" + p.localCName + "\r\n", e.rtpSender && e.sendEncodingParameters[0].rtx && (i += "a=ssrc:" + e.sendEncodingParameters[0].rtx.ssrc + " cname:" + p.localCName + "\r\n"), i
                }, p.getDirection = function (e, t) {
                    for (var r = p.splitLines(e), n = 0; n < r.length; n++) switch (r[n]) {
                    case "a=sendrecv":
                    case "a=sendonly":
                    case "a=recvonly":
                    case "a=inactive":
                        return r[n].substr(2)
                    }
                    return t ? p.getDirection(t) : "sendrecv"
                }, p.getKind = function (e) {
                    return p.splitLines(e)[0].split(" ")[0].substr(2)
                }, p.isRejected = function (e) {
                    return "0" === e.split(" ", 2)[1]
                }, t.exports = p
            }, {}
        ],
        2: [
            function (r, n, e) {
                (function (e) {
                    "use strict";
                    var t = r("./adapter_factory.js");
                    n.exports = t({
                        window: e.window
                    })
                }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
            }, {
                "./adapter_factory.js": 3
            }
        ],
        3: [
            function (l, e, t) {
                "use strict";
                e.exports = function (e, t) {
                    var r = e && e.window,
                        n = {
                            shimChrome: !0,
                            shimFirefox: !0,
                            shimEdge: !0,
                            shimSafari: !0
                        };
                    for (var i in t) hasOwnProperty.call(t, i) && (n[i] = t[i]);
                    var a = l("./utils"),
                        o = a.log,
                        s = a.detectBrowser(r),
                        c = {
                            browserDetails: s,
                            extractVersion: a.extractVersion,
                            disableLog: a.disableLog,
                            disableWarnings: a.disableWarnings
                        },
                        d = l("./chrome/chrome_shim") || null,
                        p = l("./edge/edge_shim") || null,
                        u = l("./firefox/firefox_shim") || null,
                        f = l("./safari/safari_shim") || null;
                    switch (s.browser) {
                    case "chrome":
                        if (!d || !d.shimPeerConnection || !n.shimChrome) return o("Chrome shim is not included in this adapter release."), c;
                        o("adapter.js shimming chrome."), (c.browserShim = d).shimGetUserMedia(r), d.shimMediaStream(r), a.shimCreateObjectURL(r), d.shimSourceObject(r), d.shimPeerConnection(r), d.shimOnTrack(r), d.shimAddTrackRemoveTrack(r), d.shimGetSendersWithDtmf(r);
                        break;
                    case "firefox":
                        if (!u || !u.shimPeerConnection || !n.shimFirefox) return o("Firefox shim is not included in this adapter release."), c;
                        o("adapter.js shimming firefox."), (c.browserShim = u).shimGetUserMedia(r), a.shimCreateObjectURL(r), u.shimSourceObject(r), u.shimPeerConnection(r), u.shimOnTrack(r);
                        break;
                    case "edge":
                        if (!p || !p.shimPeerConnection || !n.shimEdge) return o("MS edge shim is not included in this adapter release."), c;
                        o("adapter.js shimming edge."), (c.browserShim = p).shimGetUserMedia(r), a.shimCreateObjectURL(r), p.shimPeerConnection(r), p.shimReplaceTrack(r);
                        break;
                    case "safari":
                        if (!f || !n.shimSafari) return o("Safari shim is not included in this adapter release."), c;
                        o("adapter.js shimming safari."), c.browserShim = f, a.shimCreateObjectURL(r), f.shimRTCIceServerUrls(r), f.shimCallbacksAPI(r), f.shimLocalStreamsAPI(r), f.shimRemoteStreamsAPI(r), f.shimGetUserMedia(r);
                        break;
                    default:
                        o("Unsupported browser!")
                    }
                    return c
                }
            }, {
                "./chrome/chrome_shim": 4,
                "./edge/edge_shim": 6,
                "./firefox/firefox_shim": 9,
                "./safari/safari_shim": 11,
                "./utils": 12
            }
        ],
        4: [
            function (e, t, r) {
                "use strict";
                var o = e("../utils.js"),
                    n = o.log,
                    i = {
                        shimMediaStream: function (e) {
                            e.MediaStream = e.MediaStream || e.webkitMediaStream
                        }, shimOnTrack: function (a) {
                            if ("object" == typeof a && a.RTCPeerConnection && !("ontrack" in a.RTCPeerConnection.prototype)) {
                                Object.defineProperty(a.RTCPeerConnection.prototype, "ontrack", {
                                    get: function () {
                                        return this._ontrack
                                    }, set: function (e) {
                                        this._ontrack && this.removeEventListener("track", this._ontrack), this.addEventListener("track", this._ontrack = e)
                                    }
                                });
                                var e = a.RTCPeerConnection.prototype.setRemoteDescription;
                                a.RTCPeerConnection.prototype.setRemoteDescription = function () {
                                    var i = this;
                                    return i._ontrackpoly || (i._ontrackpoly = function (n) {
                                        n.stream.addEventListener("addtrack", function (t) {
                                            var e;
                                            e = a.RTCPeerConnection.prototype.getReceivers ? i.getReceivers().find(function (e) {
                                                return e.track && e.track.id === t.track.id
                                            }) : {
                                                track: t.track
                                            };
                                            var r = new Event("track");
                                            r.track = t.track, r.receiver = e, r.streams = [n.stream], i.dispatchEvent(r)
                                        }), n.stream.getTracks().forEach(function (t) {
                                            var e;
                                            e = a.RTCPeerConnection.prototype.getReceivers ? i.getReceivers().find(function (e) {
                                                return e.track && e.track.id === t.id
                                            }) : {
                                                track: t
                                            };
                                            var r = new Event("track");
                                            r.track = t, r.receiver = e, r.streams = [n.stream], i.dispatchEvent(r)
                                        })
                                    }, i.addEventListener("addstream", i._ontrackpoly)), e.apply(i, arguments)
                                }
                            }
                        }, shimGetSendersWithDtmf: function (e) {
                            if ("object" == typeof e && e.RTCPeerConnection && !("getSenders" in e.RTCPeerConnection.prototype) && "createDTMFSender" in e.RTCPeerConnection.prototype) {
                                var n = function (e, t) {
                                    return {
                                        track: t,
                                        get dtmf() {
                                            return void 0 === this._dtmf && ("audio" === t.kind ? this._dtmf = e.createDTMFSender(t) : this._dtmf = null), this._dtmf
                                        },
                                        _pc: e
                                    }
                                };
                                if (!e.RTCPeerConnection.prototype.getSenders) {
                                    e.RTCPeerConnection.prototype.getSenders = function () {
                                        return this._senders = this._senders || [], this._senders.slice()
                                    };
                                    var i = e.RTCPeerConnection.prototype.addTrack;
                                    e.RTCPeerConnection.prototype.addTrack = function (e, t) {
                                        var r = i.apply(this, arguments);
                                        return r || (r = n(this, e), this._senders.push(r)), r
                                    };
                                    var r = e.RTCPeerConnection.prototype.removeTrack;
                                    e.RTCPeerConnection.prototype.removeTrack = function (e) {
                                        r.apply(this, arguments);
                                        var t = this._senders.indexOf(e); - 1 !== t && this._senders.splice(t, 1)
                                    }
                                }
                                var a = e.RTCPeerConnection.prototype.addStream;
                                e.RTCPeerConnection.prototype.addStream = function (e) {
                                    var t = this;
                                    t._senders = t._senders || [], a.apply(t, [e]), e.getTracks().forEach(function (e) {
                                        t._senders.push(n(t, e))
                                    })
                                };
                                var t = e.RTCPeerConnection.prototype.removeStream;
                                e.RTCPeerConnection.prototype.removeStream = function (e) {
                                    var r = this;
                                    r._senders = r._senders || [], t.apply(r, [r._streams[e.id] || e]), e.getTracks().forEach(function (t) {
                                        var e = r._senders.find(function (e) {
                                            return e.track === t
                                        });
                                        e && r._senders.splice(r._senders.indexOf(e), 1)
                                    })
                                }
                            } else if ("object" == typeof e && e.RTCPeerConnection && "getSenders" in e.RTCPeerConnection.prototype && "createDTMFSender" in e.RTCPeerConnection.prototype && e.RTCRtpSender && !("dtmf" in e.RTCRtpSender.prototype)) {
                                var o = e.RTCPeerConnection.prototype.getSenders;
                                e.RTCPeerConnection.prototype.getSenders = function () {
                                    var t = this,
                                        e = o.apply(t, []);
                                    return e.forEach(function (e) {
                                        e._pc = t
                                    }), e
                                }, Object.defineProperty(e.RTCRtpSender.prototype, "dtmf", {
                                    get: function () {
                                        return void 0 === this._dtmf && ("audio" === this.track.kind ? this._dtmf = this._pc.createDTMFSender(this.track) : this._dtmf = null), this._dtmf
                                    }
                                })
                            }
                        }, shimSourceObject: function (e) {
                            var r = e && e.URL;
                            "object" == typeof e && (!e.HTMLMediaElement || "srcObject" in e.HTMLMediaElement.prototype || Object.defineProperty(e.HTMLMediaElement.prototype, "srcObject", {
                                get: function () {
                                    return this._srcObject
                                }, set: function (e) {
                                    var t = this;
                                    this._srcObject = e, this.src && r.revokeObjectURL(this.src), e ? (this.src = r.createObjectURL(e), e.addEventListener("addtrack", function () {
                                        t.src && r.revokeObjectURL(t.src), t.src = r.createObjectURL(e)
                                    }), e.addEventListener("removetrack", function () {
                                        t.src && r.revokeObjectURL(t.src), t.src = r.createObjectURL(e)
                                    })) : this.src = ""
                                }
                            }))
                        }, shimAddTrackRemoveTrack: function (o) {
                            if (!o.RTCPeerConnection.prototype.addTrack) {
                                var r = o.RTCPeerConnection.prototype.getLocalStreams;
                                o.RTCPeerConnection.prototype.getLocalStreams = function () {
                                    var t = this,
                                        e = r.apply(this);
                                    return t._reverseStreams = t._reverseStreams || {}, e.map(function (e) {
                                        return t._reverseStreams[e.id]
                                    })
                                };
                                var n = o.RTCPeerConnection.prototype.addStream;
                                o.RTCPeerConnection.prototype.addStream = function (e) {
                                    var r = this;
                                    if (r._streams = r._streams || {}, r._reverseStreams = r._reverseStreams || {}, e.getTracks().forEach(function (t) {
                                        if (r.getSenders().find(function (e) {
                                            return e.track === t
                                        })) throw new DOMException("Track already exists.", "InvalidAccessError")
                                    }), !r._reverseStreams[e.id]) {
                                        var t = new o.MediaStream(e.getTracks());
                                        r._streams[e.id] = t, r._reverseStreams[t.id] = e, e = t
                                    }
                                    n.apply(r, [e])
                                };
                                var i = o.RTCPeerConnection.prototype.removeStream;
                                o.RTCPeerConnection.prototype.removeStream = function (e) {
                                    var t = this;
                                    t._streams = t._streams || {}, t._reverseStreams = t._reverseStreams || {}, i.apply(t, [t._streams[e.id] || e]), delete t._reverseStreams[t._streams[e.id] ? t._streams[e.id].id : e.id], delete t._streams[e.id]
                                }, o.RTCPeerConnection.prototype.addTrack = function (t, e) {
                                    var r = this;
                                    if ("closed" === r.signalingState) throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
                                    var n = [].slice.call(arguments, 1);
                                    if (1 !== n.length || !n[0].getTracks().find(function (e) {
                                        return e === t
                                    })) throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.", "NotSupportedError");
                                    if (r.getSenders().find(function (e) {
                                        return e.track === t
                                    })) throw new DOMException("Track already exists.", "InvalidAccessError");
                                    r._streams = r._streams || {}, r._reverseStreams = r._reverseStreams || {};
                                    var i = r._streams[e.id];
                                    if (i) i.addTrack(t), r.dispatchEvent(new Event("negotiationneeded"));
                                    else {
                                        var a = new o.MediaStream([t]);
                                        r._streams[e.id] = a, r._reverseStreams[a.id] = e, r.addStream(a)
                                    }
                                    return r.getSenders().find(function (e) {
                                        return e.track === t
                                    })
                                }, o.RTCPeerConnection.prototype.removeTrack = function (t) {
                                    var r, n = this;
                                    if ("closed" === n.signalingState) throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
                                    if (!t._pc) throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.", "TypeError");
                                    if (!(t._pc === n)) throw new DOMException("Sender was not created by this connection.", "InvalidAccessError");
                                    n._streams = n._streams || {}, Object.keys(n._streams).forEach(function (e) {
                                        n._streams[e].getTracks().find(function (e) {
                                            return t.track === e
                                        }) && (r = n._streams[e])
                                    }), r && (1 === r.getTracks().length ? n.removeStream(r) : r.removeTrack(t.track), n.dispatchEvent(new Event("negotiationneeded")))
                                }
                            }
                        }, shimPeerConnection: function (r) {
                            var e = o.detectBrowser(r);
                            if (r.RTCPeerConnection) {
                                var a = r.RTCPeerConnection;
                                r.RTCPeerConnection = function (e, t) {
                                    if (e && e.iceServers) {
                                        for (var r = [], n = 0; n < e.iceServers.length; n++) {
                                            var i = e.iceServers[n];
                                            !i.hasOwnProperty("urls") && i.hasOwnProperty("url") ? (o.deprecated("RTCIceServer.url", "RTCIceServer.urls"), (i = JSON.parse(JSON.stringify(i))).urls = i.url, r.push(i)) : r.push(e.iceServers[n])
                                        }
                                        e.iceServers = r
                                    }
                                    return new a(e, t)
                                }, r.RTCPeerConnection.prototype = a.prototype, Object.defineProperty(r.RTCPeerConnection, "generateCertificate", {
                                    get: function () {
                                        return a.generateCertificate
                                    }
                                })
                            } else r.RTCPeerConnection = function (e, t) {
                                return n("PeerConnection"), e && e.iceTransportPolicy && (e.iceTransports = e.iceTransportPolicy), new r.webkitRTCPeerConnection(e, t)
                            }, r.RTCPeerConnection.prototype = r.webkitRTCPeerConnection.prototype, r.webkitRTCPeerConnection.generateCertificate && Object.defineProperty(r.RTCPeerConnection, "generateCertificate", {
                                get: function () {
                                    return r.webkitRTCPeerConnection.generateCertificate
                                }
                            });
                            var s = r.RTCPeerConnection.prototype.getStats;
                            r.RTCPeerConnection.prototype.getStats = function (e, t, r) {
                                var n = this,
                                    i = arguments;
                                if (0 < arguments.length && "function" == typeof e) return s.apply(this, arguments);
                                if (0 === s.length && (0 === arguments.length || "function" != typeof e)) return s.apply(this, []);
                                var a = function (e) {
                                        var n = {};
                                        return e.result().forEach(function (t) {
                                            var r = {
                                                id: t.id,
                                                timestamp: t.timestamp,
                                                type: {
                                                    localcandidate: "local-candidate",
                                                    remotecandidate: "remote-candidate"
                                                }[t.type] || t.type
                                            };
                                            t.names().forEach(function (e) {
                                                r[e] = t.stat(e)
                                            }), n[r.id] = r
                                        }), n
                                    },
                                    o = function (t) {
                                        return new Map(Object.keys(t).map(function (e) {
                                            return [e, t[e]]
                                        }))
                                    };
                                if (2 <= arguments.length) {
                                    return s.apply(this, [
                                        function (e) {
                                            i[1](o(a(e)))
                                        },
                                        e
                                    ])
                                }
                                return new Promise(function (t, e) {
                                    s.apply(n, [
                                        function (e) {
                                            t(o(a(e)))
                                        },
                                        e
                                    ])
                                }).then(t, r)
                            }, e.version < 51 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function (e) {
                                var i = r.RTCPeerConnection.prototype[e];
                                r.RTCPeerConnection.prototype[e] = function () {
                                    var r = arguments,
                                        n = this,
                                        e = new Promise(function (e, t) {
                                            i.apply(n, [r[0], e, t])
                                        });
                                    return r.length < 2 ? e : e.then(function () {
                                        r[1].apply(null, [])
                                    }, function (e) {
                                        3 <= r.length && r[2].apply(null, [e])
                                    })
                                }
                            }), e.version < 52 && ["createOffer", "createAnswer"].forEach(function (e) {
                                var i = r.RTCPeerConnection.prototype[e];
                                r.RTCPeerConnection.prototype[e] = function () {
                                    var r = this;
                                    if (arguments.length < 1 || 1 === arguments.length && "object" == typeof arguments[0]) {
                                        var n = 1 === arguments.length ? arguments[0] : void 0;
                                        return new Promise(function (e, t) {
                                            i.apply(r, [e, t, n])
                                        })
                                    }
                                    return i.apply(this, arguments)
                                }
                            }), ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function (e) {
                                var t = r.RTCPeerConnection.prototype[e];
                                r.RTCPeerConnection.prototype[e] = function () {
                                    return arguments[0] = new("addIceCandidate" === e ? r.RTCIceCandidate : r.RTCSessionDescription)(arguments[0]), t.apply(this, arguments)
                                }
                            });
                            var t = r.RTCPeerConnection.prototype.addIceCandidate;
                            r.RTCPeerConnection.prototype.addIceCandidate = function () {
                                return arguments[0] ? t.apply(this, arguments) : (arguments[1] && arguments[1].apply(null), Promise.resolve())
                            }
                        }
                    };
                t.exports = {
                    shimMediaStream: i.shimMediaStream,
                    shimOnTrack: i.shimOnTrack,
                    shimAddTrackRemoveTrack: i.shimAddTrackRemoveTrack,
                    shimGetSendersWithDtmf: i.shimGetSendersWithDtmf,
                    shimSourceObject: i.shimSourceObject,
                    shimPeerConnection: i.shimPeerConnection,
                    shimGetUserMedia: e("./getusermedia")
                }
            }, {
                "../utils.js": 12,
                "./getusermedia": 5
            }
        ],
        5: [
            function (e, t, r) {
                "use strict";
                var a = e("../utils.js"),
                    d = a.log;
                t.exports = function (e) {
                    var o = a.detectBrowser(e),
                        s = e && e.navigator,
                        c = function (i) {
                            if ("object" != typeof i || i.mandatory || i.optional) return i;
                            var a = {};
                            return Object.keys(i).forEach(function (t) {
                                if ("require" !== t && "advanced" !== t && "mediaSource" !== t) {
                                    var r = "object" == typeof i[t] ? i[t] : {
                                        ideal: i[t]
                                    };
                                    void 0 !== r.exact && "number" == typeof r.exact && (r.min = r.max = r.exact);
                                    var n = function (e, t) {
                                        return e ? e + t.charAt(0).toUpperCase() + t.slice(1) : "deviceId" === t ? "sourceId" : t
                                    };
                                    if (void 0 !== r.ideal) {
                                        a.optional = a.optional || [];
                                        var e = {};
                                        "number" == typeof r.ideal ? (e[n("min", t)] = r.ideal, a.optional.push(e), (e = {})[n("max", t)] = r.ideal) : e[n("", t)] = r.ideal, a.optional.push(e)
                                    }
                                    void 0 !== r.exact && "number" != typeof r.exact ? (a.mandatory = a.mandatory || {}, a.mandatory[n("", t)] = r.exact) : ["min", "max"].forEach(function (e) {
                                        void 0 !== r[e] && (a.mandatory = a.mandatory || {}, a.mandatory[n(e, t)] = r[e])
                                    })
                                }
                            }), i.advanced && (a.optional = (a.optional || []).concat(i.advanced)), a
                        },
                        n = function (r, n) {
                            if ((r = JSON.parse(JSON.stringify(r))) && "object" == typeof r.audio) {
                                var e = function (e, t, r) {
                                    t in e && !(r in e) && (e[r] = e[t], delete e[t])
                                };
                                e((r = JSON.parse(JSON.stringify(r))).audio, "autoGainControl", "googAutoGainControl"), e(r.audio, "noiseSuppression", "googNoiseSuppression"), r.audio = c(r.audio)
                            }
                            if (r && "object" == typeof r.video) {
                                var i = r.video.facingMode;
                                i = i && ("object" == typeof i ? i : {
                                    ideal: i
                                });
                                var a, t = o.version < 61;
                                if (i && ("user" === i.exact || "environment" === i.exact || "user" === i.ideal || "environment" === i.ideal) && (!s.mediaDevices.getSupportedConstraints || !s.mediaDevices.getSupportedConstraints().facingMode || t))
                                    if (delete r.video.facingMode, "environment" === i.exact || "environment" === i.ideal ? a = ["back", "rear"] : "user" !== i.exact && "user" !== i.ideal || (a = ["front"]), a) return s.mediaDevices.enumerateDevices().then(function (e) {
                                        var t = (e = e.filter(function (e) {
                                            return "videoinput" === e.kind
                                        })).find(function (t) {
                                            return a.some(function (e) {
                                                return -1 !== t.label.toLowerCase().indexOf(e)
                                            })
                                        });
                                        return !t && e.length && -1 !== a.indexOf("back") && (t = e[e.length - 1]), t && (r.video.deviceId = i.exact ? {
                                            exact: t.deviceId
                                        } : {
                                            ideal: t.deviceId
                                        }), r.video = c(r.video), d("chrome: " + JSON.stringify(r)), n(r)
                                    });
                                r.video = c(r.video)
                            }
                            return d("chrome: " + JSON.stringify(r)), n(r)
                        },
                        i = function (e) {
                            return {
                                name: {
                                    PermissionDeniedError: "NotAllowedError",
                                    InvalidStateError: "NotReadableError",
                                    DevicesNotFoundError: "NotFoundError",
                                    ConstraintNotSatisfiedError: "OverconstrainedError",
                                    TrackStartError: "NotReadableError",
                                    MediaDeviceFailedDueToShutdown: "NotReadableError",
                                    MediaDeviceKillSwitchOn: "NotReadableError"
                                }[e.name] || e.name,
                                message: e.message,
                                constraint: e.constraintName,
                                toString: function () {
                                    return this.name + (this.message && ": ") + this.message
                                }
                            }
                        };
                    s.getUserMedia = function (e, t, r) {
                        n(e, function (e) {
                            s.webkitGetUserMedia(e, t, function (e) {
                                r(i(e))
                            })
                        })
                    };
                    var t = function (r) {
                        return new Promise(function (e, t) {
                            s.getUserMedia(r, e, t)
                        })
                    };
                    if (s.mediaDevices || (s.mediaDevices = {
                        getUserMedia: t,
                        enumerateDevices: function () {
                            return new Promise(function (t) {
                                var r = {
                                    audio: "audioinput",
                                    video: "videoinput"
                                };
                                return e.MediaStreamTrack.getSources(function (e) {
                                    t(e.map(function (e) {
                                        return {
                                            label: e.label,
                                            kind: r[e.kind],
                                            deviceId: e.id,
                                            groupId: ""
                                        }
                                    }))
                                })
                            })
                        }, getSupportedConstraints: function () {
                            return {
                                deviceId: !0,
                                echoCancellation: !0,
                                facingMode: !0,
                                frameRate: !0,
                                height: !0,
                                width: !0
                            }
                        }
                    }), s.mediaDevices.getUserMedia) {
                        var r = s.mediaDevices.getUserMedia.bind(s.mediaDevices);
                        s.mediaDevices.getUserMedia = function (e) {
                            return n(e, function (t) {
                                return r(t).then(function (e) {
                                    if (t.audio && !e.getAudioTracks().length || t.video && !e.getVideoTracks().length) throw e.getTracks().forEach(function (e) {
                                        e.stop()
                                    }), new DOMException("", "NotFoundError");
                                    return e
                                }, function (e) {
                                    return Promise.reject(i(e))
                                })
                            })
                        }
                    } else s.mediaDevices.getUserMedia = function (e) {
                        return t(e)
                    };
                    void 0 === s.mediaDevices.addEventListener && (s.mediaDevices.addEventListener = function () {
                        d("Dummy mediaDevices.addEventListener called.")
                    }), void 0 === s.mediaDevices.removeEventListener && (s.mediaDevices.removeEventListener = function () {
                        d("Dummy mediaDevices.removeEventListener called.")
                    })
                }
            }, {
                "../utils.js": 12
            }
        ],
        6: [
            function (e, t, r) {
                "use strict";
                var n = e("../utils"),
                    i = e("./rtcpeerconnection_shim");
                t.exports = {
                    shimGetUserMedia: e("./getusermedia"),
                    shimPeerConnection: function (e) {
                        var t = n.detectBrowser(e);
                        if (e.RTCIceGatherer && (e.RTCIceCandidate || (e.RTCIceCandidate = function (e) {
                            return e
                        }), e.RTCSessionDescription || (e.RTCSessionDescription = function (e) {
                            return e
                        }), t.version < 15025)) {
                            var r = Object.getOwnPropertyDescriptor(e.MediaStreamTrack.prototype, "enabled");
                            Object.defineProperty(e.MediaStreamTrack.prototype, "enabled", {
                                set: function (e) {
                                    r.set.call(this, e);
                                    var t = new Event("enabled");
                                    t.enabled = e, this.dispatchEvent(t)
                                }
                            })
                        }!e.RTCRtpSender || "dtmf" in e.RTCRtpSender.prototype || Object.defineProperty(e.RTCRtpSender.prototype, "dtmf", {
                            get: function () {
                                return void 0 === this._dtmf && ("audio" === this.track.kind ? this._dtmf = new e.RTCDtmfSender(this) : "video" === this.track.kind && (this._dtmf = null)), this._dtmf
                            }
                        }), e.RTCPeerConnection = i(e, t.version)
                    }, shimReplaceTrack: function (e) {
                        !e.RTCRtpSender || "replaceTrack" in e.RTCRtpSender.prototype || (e.RTCRtpSender.prototype.replaceTrack = e.RTCRtpSender.prototype.setTrack)
                    }
                }
            }, {
                "../utils": 12,
                "./getusermedia": 7,
                "./rtcpeerconnection_shim": 8
            }
        ],
        7: [
            function (e, t, r) {
                "use strict";
                t.exports = function (e) {
                    var t = e && e.navigator,
                        r = t.mediaDevices.getUserMedia.bind(t.mediaDevices);
                    t.mediaDevices.getUserMedia = function (e) {
                        return r(e).catch(function (e) {
                            return Promise.reject({
                                name: {
                                    PermissionDeniedError: "NotAllowedError"
                                }[(t = e).name] || t.name,
                                message: t.message,
                                constraint: t.constraint,
                                toString: function () {
                                    return this.name
                                }
                            });
                            var t
                        })
                    }
                }
            }, {}
        ],
        8: [
            function (e, t, r) {
                "use strict";
                var j = e("sdp");

                function m(d, p) {
                    var u = {
                            codecs: [],
                            headerExtensions: [],
                            fecMechanisms: []
                        },
                        f = function (e, t) {
                            e = parseInt(e, 10);
                            for (var r = 0; r < t.length; r++)
                                if (t[r].payloadType === e || t[r].preferredPayloadType === e) return t[r]
                        };
                    return d.codecs.forEach(function (r) {
                        for (var e = 0; e < p.codecs.length; e++) {
                            var t = p.codecs[e];
                            if (r.name.toLowerCase() === t.name.toLowerCase() && r.clockRate === t.clockRate) {
                                if ("rtx" === r.name.toLowerCase() && r.parameters && t.parameters.apt && (n = r, i = t, a = d.codecs, o = p.codecs, c = s = void 0, s = f(n.parameters.apt, a), c = f(i.parameters.apt, o), !s || !c || s.name.toLowerCase() !== c.name.toLowerCase())) continue;
                                (t = JSON.parse(JSON.stringify(t))).numChannels = Math.min(r.numChannels, t.numChannels), u.codecs.push(t), t.rtcpFeedback = t.rtcpFeedback.filter(function (e) {
                                    for (var t = 0; t < r.rtcpFeedback.length; t++)
                                        if (r.rtcpFeedback[t].type === e.type && r.rtcpFeedback[t].parameter === e.parameter) return !0;
                                    return !1
                                });
                                break
                            }
                        }
                        var n, i, a, o, s, c
                    }), d.headerExtensions.forEach(function (e) {
                        for (var t = 0; t < p.headerExtensions.length; t++) {
                            var r = p.headerExtensions[t];
                            if (e.uri === r.uri) {
                                u.headerExtensions.push(r);
                                break
                            }
                        }
                    }), u
                }

                function o(e, t, r) {
                    return -1 !== {
                        offer: {
                            setLocalDescription: ["stable", "have-local-offer"],
                            setRemoteDescription: ["stable", "have-remote-offer"]
                        },
                        answer: {
                            setLocalDescription: ["have-remote-offer", "have-local-pranswer"],
                            setRemoteDescription: ["have-local-offer", "have-remote-pranswer"]
                        }
                    }[t][e].indexOf(r)
                }
                t.exports = function (D, M) {
                    var e = function (e) {
                        var t, n, i, r = this,
                            a = document.createDocumentFragment();
                        if (["addEventListener", "removeEventListener", "dispatchEvent"].forEach(function (e) {
                            r[e] = a[e].bind(a)
                        }), this.needNegotiation = !1, this.onicecandidate = null, this.onaddstream = null, this.ontrack = null, this.onremovestream = null, this.onsignalingstatechange = null, this.oniceconnectionstatechange = null, this.onicegatheringstatechange = null, this.onnegotiationneeded = null, this.ondatachannel = null, this.canTrickleIceCandidates = null, this.localStreams = [], this.remoteStreams = [], this.getLocalStreams = function () {
                            return r.localStreams
                        }, this.getRemoteStreams = function () {
                            return r.remoteStreams
                        }, this.localDescription = new D.RTCSessionDescription({
                            type: "",
                            sdp: ""
                        }), this.remoteDescription = new D.RTCSessionDescription({
                            type: "",
                            sdp: ""
                        }), this.signalingState = "stable", this.iceConnectionState = "new", this.iceGatheringState = "new", this.iceOptions = {
                            gatherPolicy: "all",
                            iceServers: []
                        }, e && e.iceTransportPolicy) switch (e.iceTransportPolicy) {
                        case "all":
                        case "relay":
                            this.iceOptions.gatherPolicy = e.iceTransportPolicy
                        }
                        this.usingBundle = e && "max-bundle" === e.bundlePolicy, e && e.iceServers && (this.iceOptions.iceServers = (t = e.iceServers, n = M, i = !1, (t = JSON.parse(JSON.stringify(t))).filter(function (e) {
                            if (e && (e.urls || e.url)) {
                                var t = e.urls || e.url;
                                e.url && !e.urls && console.warn("RTCIceServer.url is deprecated! Use urls instead.");
                                var r = "string" == typeof t;
                                return r && (t = [t]), t = t.filter(function (e) {
                                    return 0 !== e.indexOf("turn:") || -1 === e.indexOf("transport=udp") || -1 !== e.indexOf("turn:[") || i ? 0 === e.indexOf("stun:") && 14393 <= n : i = !0
                                }), delete e.url, e.urls = r ? t[0] : t, !!t.length
                            }
                            return !1
                        }))), this._config = e || {}, this.transceivers = [], this._localIceCandidatesBuffer = [], this._sdpSessionId = j.generateSessionId()
                    };
                    return e.prototype._emitGatheringStateChange = function () {
                        var e = new Event("icegatheringstatechange");
                        this.dispatchEvent(e), null !== this.onicegatheringstatechange && this.onicegatheringstatechange(e)
                    }, e.prototype._emitBufferedCandidates = function () {
                        var r = this,
                            n = j.splitSections(r.localDescription.sdp);
                        this._localIceCandidatesBuffer.forEach(function (e) {
                            if (!e.candidate || 0 === Object.keys(e.candidate).length)
                                for (var t = 1; t < n.length; t++) - 1 === n[t].indexOf("\r\na=end-of-candidates\r\n") && (n[t] += "a=end-of-candidates\r\n");
                            else n[e.candidate.sdpMLineIndex + 1] += "a=" + e.candidate.candidate + "\r\n";
                            (r.localDescription.sdp = n.join(""), r.dispatchEvent(e), null !== r.onicecandidate && r.onicecandidate(e), e.candidate || "complete" === r.iceGatheringState) || r.transceivers.every(function (e) {
                                return e.iceGatherer && "completed" === e.iceGatherer.state
                            }) && "complete" !== r.iceGatheringStateChange && (r.iceGatheringState = "complete", r._emitGatheringStateChange())
                        }), this._localIceCandidatesBuffer = []
                    }, e.prototype.getConfiguration = function () {
                        return this._config
                    }, e.prototype._createTransceiver = function (e) {
                        var t = 0 < this.transceivers.length,
                            r = {
                                track: null,
                                iceGatherer: null,
                                iceTransport: null,
                                dtlsTransport: null,
                                localCapabilities: null,
                                remoteCapabilities: null,
                                rtpSender: null,
                                rtpReceiver: null,
                                kind: e,
                                mid: null,
                                sendEncodingParameters: null,
                                recvEncodingParameters: null,
                                stream: null,
                                wantReceive: !0
                            };
                        if (this.usingBundle && t) r.iceTransport = this.transceivers[0].iceTransport, r.dtlsTransport = this.transceivers[0].dtlsTransport;
                        else {
                            var n = this._createIceAndDtlsTransports();
                            r.iceTransport = n.iceTransport, r.dtlsTransport = n.dtlsTransport
                        }
                        return this.transceivers.push(r), r
                    }, e.prototype.addTrack = function (e, t) {
                        for (var r, n = 0; n < this.transceivers.length; n++) this.transceivers[n].track || this.transceivers[n].kind !== e.kind || (r = this.transceivers[n]);
                        return r || (r = this._createTransceiver(e.kind)), r.track = e, r.stream = t, r.rtpSender = new D.RTCRtpSender(e, r.dtlsTransport), this._maybeFireNegotiationNeeded(), r.rtpSender
                    }, e.prototype.addStream = function (t) {
                        var r = this;
                        if (15025 <= M) this.localStreams.push(t), t.getTracks().forEach(function (e) {
                            r.addTrack(e, t)
                        });
                        else {
                            var n = t.clone();
                            t.getTracks().forEach(function (e, t) {
                                var r = n.getTracks()[t];
                                e.addEventListener("enabled", function (e) {
                                    r.enabled = e.enabled
                                })
                            }), n.getTracks().forEach(function (e) {
                                r.addTrack(e, n)
                            }), this.localStreams.push(n)
                        }
                        this._maybeFireNegotiationNeeded()
                    }, e.prototype.removeStream = function (e) {
                        var t = this.localStreams.indexOf(e); - 1 < t && (this.localStreams.splice(t, 1), this._maybeFireNegotiationNeeded())
                    }, e.prototype.getSenders = function () {
                        return this.transceivers.filter(function (e) {
                            return !!e.rtpSender
                        }).map(function (e) {
                            return e.rtpSender
                        })
                    }, e.prototype.getReceivers = function () {
                        return this.transceivers.filter(function (e) {
                            return !!e.rtpReceiver
                        }).map(function (e) {
                            return e.rtpReceiver
                        })
                    }, e.prototype._createIceGatherer = function (o, s) {
                        var c = this,
                            d = new D.RTCIceGatherer(c.iceOptions);
                        return d.onlocalcandidate = function (e) {
                            var t = new Event("icecandidate");
                            t.candidate = {
                                sdpMid: o,
                                sdpMLineIndex: s
                            };
                            var r = e.candidate,
                                n = !r || 0 === Object.keys(r).length;
                            n ? void 0 === d.state && (d.state = "completed") : (r.component = 1, t.candidate.candidate = j.writeCandidate(r));
                            var i = j.splitSections(c.localDescription.sdp);
                            i[t.candidate.sdpMLineIndex + 1] += n ? "a=end-of-candidates\r\n" : "a=" + t.candidate.candidate + "\r\n", c.localDescription.sdp = i.join("");
                            var a = (c._pendingOffer ? c._pendingOffer : c.transceivers).every(function (e) {
                                return e.iceGatherer && "completed" === e.iceGatherer.state
                            });
                            switch (c.iceGatheringState) {
                            case "new":
                                n || c._localIceCandidatesBuffer.push(t), n && a && c._localIceCandidatesBuffer.push(new Event("icecandidate"));
                                break;
                            case "gathering":
                                c._emitBufferedCandidates(), n || (c.dispatchEvent(t), null !== c.onicecandidate && c.onicecandidate(t)), a && (c.dispatchEvent(new Event("icecandidate")), null !== c.onicecandidate && c.onicecandidate(new Event("icecandidate")), c.iceGatheringState = "complete", c._emitGatheringStateChange())
                            }
                        }, d
                    }, e.prototype._createIceAndDtlsTransports = function () {
                        var e = this,
                            t = new D.RTCIceTransport(null);
                        t.onicestatechange = function () {
                            e._updateConnectionState()
                        };
                        var r = new D.RTCDtlsTransport(t);
                        return r.ondtlsstatechange = function () {
                            e._updateConnectionState()
                        }, r.onerror = function () {
                            Object.defineProperty(r, "state", {
                                value: "failed",
                                writable: !0
                            }), e._updateConnectionState()
                        }, {
                            iceTransport: t,
                            dtlsTransport: r
                        }
                    }, e.prototype._disposeIceAndDtlsTransports = function (e) {
                        var t = this.transceivers[e].iceGatherer;
                        t && (delete t.onlocalcandidate, delete this.transceivers[e].iceGatherer);
                        var r = this.transceivers[e].iceTransport;
                        r && (delete r.onicestatechange, delete this.transceivers[e].iceTransport);
                        var n = this.transceivers[e].dtlsTransport;
                        n && (delete n.ondtlsstatechange, delete n.onerror, delete this.transceivers[e].dtlsTransport)
                    }, e.prototype._transceive = function (e, t, r) {
                        var n = m(e.localCapabilities, e.remoteCapabilities);
                        t && e.rtpSender && (n.encodings = e.sendEncodingParameters, n.rtcp = {
                            cname: j.localCName,
                            compound: e.rtcpParameters.compound
                        }, e.recvEncodingParameters.length && (n.rtcp.ssrc = e.recvEncodingParameters[0].ssrc), e.rtpSender.send(n)), r && e.rtpReceiver && ("video" === e.kind && e.recvEncodingParameters && M < 15019 && e.recvEncodingParameters.forEach(function (e) {
                            delete e.rtx
                        }), n.encodings = e.recvEncodingParameters, n.rtcp = {
                            cname: e.rtcpParameters.cname,
                            compound: e.rtcpParameters.compound
                        }, e.sendEncodingParameters.length && (n.rtcp.ssrc = e.sendEncodingParameters[0].ssrc), e.rtpReceiver.receive(n))
                    }, e.prototype.setLocalDescription = function (e) {
                        var t, u, f = this;
                        if (!o("setLocalDescription", e.type, this.signalingState)) {
                            var r = new Error("Can not set local " + e.type + " in state " + this.signalingState);
                            return r.name = "InvalidStateError", 2 < arguments.length && "function" == typeof arguments[2] && D.setTimeout(arguments[2], 0, r), Promise.reject(r)
                        }
                        if ("offer" === e.type) this._pendingOffer && (t = j.splitSections(e.sdp), u = t.shift(), t.forEach(function (e, t) {
                            var r = j.parseRtpParameters(e);
                            f._pendingOffer[t].localCapabilities = r
                        }), this.transceivers = this._pendingOffer, delete this._pendingOffer);
                        else if ("answer" === e.type) {
                            t = j.splitSections(f.remoteDescription.sdp), u = t.shift();
                            var l = 0 < j.matchPrefix(u, "a=ice-lite").length;
                            t.forEach(function (e, t) {
                                var r = f.transceivers[t],
                                    n = r.iceGatherer,
                                    i = r.iceTransport,
                                    a = r.dtlsTransport,
                                    o = r.localCapabilities,
                                    s = r.remoteCapabilities;
                                if (!j.isRejected(e) && !r.isDatachannel) {
                                    var c = j.getIceParameters(e, u),
                                        d = j.getDtlsParameters(e, u);
                                    l && (d.role = "server"), f.usingBundle && 0 !== t || (i.start(n, c, l ? "controlling" : "controlled"), a.start(d));
                                    var p = m(o, s);
                                    f._transceive(r, 0 < p.codecs.length, !1)
                                }
                            })
                        }
                        switch (this.localDescription = {
                            type: e.type,
                            sdp: e.sdp
                        }, e.type) {
                        case "offer":
                            this._updateSignalingState("have-local-offer");
                            break;
                        case "answer":
                            this._updateSignalingState("stable");
                            break;
                        default:
                            throw new TypeError('unsupported type "' + e.type + '"')
                        }
                        var n = 1 < arguments.length && "function" == typeof arguments[1];
                        if (n) {
                            var i = arguments[1];
                            D.setTimeout(function () {
                                i(), "new" === f.iceGatheringState && (f.iceGatheringState = "gathering", f._emitGatheringStateChange()), f._emitBufferedCandidates()
                            }, 0)
                        }
                        var a = Promise.resolve();
                        return a.then(function () {
                            n || ("new" === f.iceGatheringState && (f.iceGatheringState = "gathering", f._emitGatheringStateChange()), D.setTimeout(f._emitBufferedCandidates.bind(f), 500))
                        }), a
                    }, e.prototype.setRemoteDescription = function (R) {
                        var w = this;
                        if (!o("setRemoteDescription", R.type, this.signalingState)) {
                            var e = new Error("Can not set remote " + R.type + " in state " + this.signalingState);
                            return e.name = "InvalidStateError", 2 < arguments.length && "function" == typeof arguments[2] && D.setTimeout(arguments[2], 0, e), Promise.reject(e)
                        }
                        var k = {},
                            E = [],
                            t = j.splitSections(R.sdp),
                            _ = t.shift(),
                            O = 0 < j.matchPrefix(_, "a=ice-lite").length,
                            x = 0 < j.matchPrefix(_, "a=group:BUNDLE ").length;
                        this.usingBundle = x;
                        var r = j.matchPrefix(_, "a=ice-options:")[0];
                        switch (this.canTrickleIceCandidates = !!r && 0 <= r.substr(14).split(" ").indexOf("trickle"), t.forEach(function (e, t) {
                            var r = j.splitLines(e),
                                n = j.getKind(e),
                                i = j.isRejected(e),
                                a = r[0].substr(2).split(" ")[2],
                                o = j.getDirection(e, _),
                                s = j.parseMsid(e),
                                c = j.getMid(e) || j.generateIdentifier();
                            if ("application" !== n || "DTLS/SCTP" !== a) {
                                var d, p, u, f, l, m, h, v, g, y, C, T = j.parseRtpParameters(e);
                                i || (y = j.getIceParameters(e, _), (C = j.getDtlsParameters(e, _)).role = "client"), h = j.parseRtpEncodingParameters(e);
                                var S = j.parseRtcpParameters(e),
                                    b = 0 < j.matchPrefix(e, "a=end-of-candidates", _).length,
                                    P = j.matchPrefix(e, "a=candidate:").map(function (e) {
                                        return j.parseCandidate(e)
                                    }).filter(function (e) {
                                        return "1" === e.component || 1 === e.component
                                    });
                                ("offer" === R.type || "answer" === R.type) && !i && x && 0 < t && w.transceivers[t] && (w._disposeIceAndDtlsTransports(t), w.transceivers[t].iceGatherer = w.transceivers[0].iceGatherer, w.transceivers[t].iceTransport = w.transceivers[0].iceTransport, w.transceivers[t].dtlsTransport = w.transceivers[0].dtlsTransport, w.transceivers[t].rtpSender && w.transceivers[t].rtpSender.setTransport(w.transceivers[0].dtlsTransport), w.transceivers[t].rtpReceiver && w.transceivers[t].rtpReceiver.setTransport(w.transceivers[0].dtlsTransport)), "offer" !== R.type || i ? "answer" !== R.type || i || (p = (d = w.transceivers[t]).iceGatherer, u = d.iceTransport, f = d.dtlsTransport, l = d.rtpReceiver, m = d.sendEncodingParameters, v = d.localCapabilities, w.transceivers[t].recvEncodingParameters = h, w.transceivers[t].remoteCapabilities = T, w.transceivers[t].rtcpParameters = S, x && 0 !== t || ((O || b) && P.length && u.setRemoteCandidates(P), u.start(p, y, "controlling"), f.start(C)), w._transceive(d, "sendrecv" === o || "recvonly" === o, "sendrecv" === o || "sendonly" === o), !l || "sendrecv" !== o && "sendonly" !== o ? delete d.rtpReceiver : (g = l.track, s ? (k[s.stream] || (k[s.stream] = new D.MediaStream), k[s.stream].addTrack(g), E.push([g, l, k[s.stream]])) : (k.default || (k.default = new D.MediaStream), k.default.addTrack(g), E.push([g, l, k.default])))) : ((d = w.transceivers[t] || w._createTransceiver(n)).mid = c, d.iceGatherer || (d.iceGatherer = x && 0 < t ? w.transceivers[0].iceGatherer : w._createIceGatherer(c, t)), !b || !P.length || x && 0 !== t || d.iceTransport.setRemoteCandidates(P), v = D.RTCRtpReceiver.getCapabilities(n), M < 15019 && (v.codecs = v.codecs.filter(function (e) {
                                    return "rtx" !== e.name
                                })), m = [{
                                    ssrc: 1001 * (2 * t + 2)
                                }], "sendrecv" !== o && "sendonly" !== o || (g = (l = new D.RTCRtpReceiver(d.dtlsTransport, n)).track, s ? (k[s.stream] || (k[s.stream] = new D.MediaStream, Object.defineProperty(k[s.stream], "id", {
                                    get: function () {
                                        return s.stream
                                    }
                                })), Object.defineProperty(g, "id", {
                                    get: function () {
                                        return s.track
                                    }
                                }), k[s.stream].addTrack(g), E.push([g, l, k[s.stream]])) : (k.default || (k.default = new D.MediaStream), k.default.addTrack(g), E.push([g, l, k.default]))), d.localCapabilities = v, d.remoteCapabilities = T, d.rtpReceiver = l, d.rtcpParameters = S, d.sendEncodingParameters = m, d.recvEncodingParameters = h, w._transceive(w.transceivers[t], !1, "sendrecv" === o || "sendonly" === o))
                            } else w.transceivers[t] = {
                                mid: c,
                                isDatachannel: !0
                            }
                        }), this.remoteDescription = {
                            type: R.type,
                            sdp: R.sdp
                        }, R.type) {
                        case "offer":
                            this._updateSignalingState("have-remote-offer");
                            break;
                        case "answer":
                            this._updateSignalingState("stable");
                            break;
                        default:
                            throw new TypeError('unsupported type "' + R.type + '"')
                        }
                        return Object.keys(k).forEach(function (e) {
                            var i = k[e];
                            if (i.getTracks().length) {
                                w.remoteStreams.push(i);
                                var t = new Event("addstream");
                                t.stream = i, w.dispatchEvent(t), null !== w.onaddstream && D.setTimeout(function () {
                                    w.onaddstream(t)
                                }, 0), E.forEach(function (e) {
                                    var t = e[0],
                                        r = e[1];
                                    if (i.id === e[2].id) {
                                        var n = new Event("track");
                                        n.track = t, n.receiver = r, n.streams = [i], w.dispatchEvent(n), null !== w.ontrack && D.setTimeout(function () {
                                            w.ontrack(n)
                                        }, 0)
                                    }
                                })
                            }
                        }), D.setTimeout(function () {
                            w && w.transceivers && w.transceivers.forEach(function (e) {
                                e.iceTransport && "new" === e.iceTransport.state && 0 < e.iceTransport.getRemoteCandidates().length && (console.warn("Timeout for addRemoteCandidate. Consider sending an end-of-candidates notification"), e.iceTransport.addRemoteCandidate({}))
                            })
                        }, 4e3), 1 < arguments.length && "function" == typeof arguments[1] && D.setTimeout(arguments[1], 0), Promise.resolve()
                    }, e.prototype.close = function () {
                        this.transceivers.forEach(function (e) {
                            e.iceTransport && e.iceTransport.stop(), e.dtlsTransport && e.dtlsTransport.stop(), e.rtpSender && e.rtpSender.stop(), e.rtpReceiver && e.rtpReceiver.stop()
                        }), this._updateSignalingState("closed")
                    }, e.prototype._updateSignalingState = function (e) {
                        this.signalingState = e;
                        var t = new Event("signalingstatechange");
                        this.dispatchEvent(t), null !== this.onsignalingstatechange && this.onsignalingstatechange(t)
                    }, e.prototype._maybeFireNegotiationNeeded = function () {
                        var t = this;
                        "stable" === this.signalingState && !0 !== this.needNegotiation && (this.needNegotiation = !0, D.setTimeout(function () {
                            if (!1 !== t.needNegotiation) {
                                t.needNegotiation = !1;
                                var e = new Event("negotiationneeded");
                                t.dispatchEvent(e), null !== t.onnegotiationneeded && t.onnegotiationneeded(e)
                            }
                        }, 0))
                    }, e.prototype._updateConnectionState = function () {
                        var e, t = {
                            new: 0,
                            closed: 0,
                            connecting: 0,
                            checking: 0,
                            connected: 0,
                            completed: 0,
                            disconnected: 0,
                            failed: 0
                        };
                        if (this.transceivers.forEach(function (e) {
                            t[e.iceTransport.state]++, t[e.dtlsTransport.state]++
                        }), t.connected += t.completed, e = "new", 0 < t.failed ? e = "failed" : 0 < t.connecting || 0 < t.checking ? e = "connecting" : 0 < t.disconnected ? e = "disconnected" : 0 < t.new ? e = "new" : (0 < t.connected || 0 < t.completed) && (e = "connected"), e !== this.iceConnectionState) {
                            this.iceConnectionState = e;
                            var r = new Event("iceconnectionstatechange");
                            this.dispatchEvent(r), null !== this.oniceconnectionstatechange && this.oniceconnectionstatechange(r)
                        }
                    }, e.prototype.createOffer = function () {
                        var e, s = this;
                        if (this._pendingOffer) throw new Error("createOffer called while there is a pending offer.");
                        1 === arguments.length && "function" != typeof arguments[0] ? e = arguments[0] : 3 === arguments.length && (e = arguments[2]);
                        var t = this.transceivers.filter(function (e) {
                                return "audio" === e.kind
                            }).length,
                            r = this.transceivers.filter(function (e) {
                                return "video" === e.kind
                            }).length;
                        if (e) {
                            if (e.mandatory || e.optional) throw new TypeError("Legacy mandatory/optional constraints not supported.");
                            void 0 !== e.offerToReceiveAudio && (t = !0 === e.offerToReceiveAudio ? 1 : !1 === e.offerToReceiveAudio ? 0 : e.offerToReceiveAudio), void 0 !== e.offerToReceiveVideo && (r = !0 === e.offerToReceiveVideo ? 1 : !1 === e.offerToReceiveVideo ? 0 : e.offerToReceiveVideo)
                        }
                        for (this.transceivers.forEach(function (e) {
                            "audio" === e.kind ? --t < 0 && (e.wantReceive = !1) : "video" === e.kind && --r < 0 && (e.wantReceive = !1)
                        }); 0 < t || 0 < r;) 0 < t && (this._createTransceiver("audio"), t--), 0 < r && (this._createTransceiver("video"), r--);
                        var c = function (e) {
                                var t = e.filter(function (e) {
                                        return "audio" === e.kind
                                    }),
                                    r = e.filter(function (e) {
                                        return "video" === e.kind
                                    });
                                for (e = []; t.length || r.length;) t.length && e.push(t.shift()), r.length && e.push(r.shift());
                                return e
                            }(this.transceivers),
                            n = j.writeSessionBoilerplate(this._sdpSessionId);
                        c.forEach(function (e, t) {
                            var r = e.track,
                                n = e.kind,
                                i = j.generateIdentifier();
                            e.mid = i, e.iceGatherer || (e.iceGatherer = s.usingBundle && 0 < t ? c[0].iceGatherer : s._createIceGatherer(i, t));
                            var a = D.RTCRtpSender.getCapabilities(n);
                            M < 15019 && (a.codecs = a.codecs.filter(function (e) {
                                return "rtx" !== e.name
                            })), a.codecs.forEach(function (e) {
                                "H264" === e.name && void 0 === e.parameters["level-asymmetry-allowed"] && (e.parameters["level-asymmetry-allowed"] = "1")
                            });
                            var o = [{
                                ssrc: 1001 * (2 * t + 1)
                            }];
                            r && 15019 <= M && "video" === n && (o[0].rtx = {
                                ssrc: 1001 * (2 * t + 1) + 1
                            }), e.wantReceive && (e.rtpReceiver = new D.RTCRtpReceiver(e.dtlsTransport, n)), e.localCapabilities = a, e.sendEncodingParameters = o
                        }), "max-compat" !== this._config.bundlePolicy && (n += "a=group:BUNDLE " + c.map(function (e) {
                            return e.mid
                        }).join(" ") + "\r\n"), n += "a=ice-options:trickle\r\n", c.forEach(function (e, t) {
                            n += j.writeMediaSection(e, e.localCapabilities, "offer", e.stream), n += "a=rtcp-rsize\r\n"
                        }), this._pendingOffer = c;
                        var i = new D.RTCSessionDescription({
                            type: "offer",
                            sdp: n
                        });
                        return arguments.length && "function" == typeof arguments[0] && D.setTimeout(arguments[0], 0, i), Promise.resolve(i)
                    }, e.prototype.createAnswer = function () {
                        var i = j.writeSessionBoilerplate(this._sdpSessionId);
                        this.usingBundle && (i += "a=group:BUNDLE " + this.transceivers.map(function (e) {
                            return e.mid
                        }).join(" ") + "\r\n"), this.transceivers.forEach(function (e, t) {
                            if (e.isDatachannel) i += "m=application 0 DTLS/SCTP 5000\r\nc=IN IP4 0.0.0.0\r\na=mid:" + e.mid + "\r\n";
                            else {
                                var r;
                                if (e.stream) "audio" === e.kind ? r = e.stream.getAudioTracks()[0] : "video" === e.kind && (r = e.stream.getVideoTracks()[0]), r && 15019 <= M && "video" === e.kind && (e.sendEncodingParameters[0].rtx = {
                                    ssrc: 1001 * (2 * t + 2) + 1
                                });
                                var n = m(e.localCapabilities, e.remoteCapabilities);
                                !n.codecs.filter(function (e) {
                                    return "rtx" === e.name.toLowerCase()
                                }).length && e.sendEncodingParameters[0].rtx && delete e.sendEncodingParameters[0].rtx, i += j.writeMediaSection(e, n, "answer", e.stream), e.rtcpParameters && e.rtcpParameters.reducedSize && (i += "a=rtcp-rsize\r\n")
                            }
                        });
                        var e = new D.RTCSessionDescription({
                            type: "answer",
                            sdp: i
                        });
                        return arguments.length && "function" == typeof arguments[0] && D.setTimeout(arguments[0], 0, e), Promise.resolve(e)
                    }, e.prototype.addIceCandidate = function (e) {
                        if (e) {
                            var t = e.sdpMLineIndex;
                            if (e.sdpMid)
                                for (var r = 0; r < this.transceivers.length; r++)
                                    if (this.transceivers[r].mid === e.sdpMid) {
                                        t = r;
                                        break
                                    }
                            var n = this.transceivers[t];
                            if (n) {
                                var i = 0 < Object.keys(e.candidate).length ? j.parseCandidate(e.candidate) : {};
                                if ("tcp" === i.protocol && (0 === i.port || 9 === i.port)) return Promise.resolve();
                                if (i.component && "1" !== i.component && 1 !== i.component) return Promise.resolve();
                                n.iceTransport.addRemoteCandidate(i);
                                var a = j.splitSections(this.remoteDescription.sdp);
                                a[t + 1] += (i.type ? e.candidate.trim() : "a=end-of-candidates") + "\r\n", this.remoteDescription.sdp = a.join("")
                            }
                        } else
                            for (var o = 0; o < this.transceivers.length; o++)
                                if (this.transceivers[o].iceTransport.addRemoteCandidate({}), this.usingBundle) return Promise.resolve(); return 1 < arguments.length && "function" == typeof arguments[1] && D.setTimeout(arguments[1], 0), Promise.resolve()
                    }, e.prototype.getStats = function () {
                        var r = [];
                        this.transceivers.forEach(function (t) {
                            ["rtpSender", "rtpReceiver", "iceGatherer", "iceTransport", "dtlsTransport"].forEach(function (e) {
                                t[e] && r.push(t[e].getStats())
                            })
                        });
                        var i = 1 < arguments.length && "function" == typeof arguments[1] && arguments[1];
                        return new Promise(function (t) {
                            var n = new Map;
                            Promise.all(r).then(function (e) {
                                e.forEach(function (r) {
                                    Object.keys(r).forEach(function (e) {
                                        var t;
                                        r[e].type = {
                                            inboundrtp: "inbound-rtp",
                                            outboundrtp: "outbound-rtp",
                                            candidatepair: "candidate-pair",
                                            localcandidate: "local-candidate",
                                            remotecandidate: "remote-candidate"
                                        }[(t = r[e]).type] || t.type, n.set(e, r[e])
                                    })
                                }), i && D.setTimeout(i, 0, n), t(n)
                            })
                        })
                    }, e
                }
            }, {
                sdp: 1
            }
        ],
        9: [
            function (e, t, r) {
                "use strict";
                var n = e("../utils"),
                    i = {
                        shimOnTrack: function (e) {
                            "object" != typeof e || !e.RTCPeerConnection || "ontrack" in e.RTCPeerConnection.prototype || Object.defineProperty(e.RTCPeerConnection.prototype, "ontrack", {
                                get: function () {
                                    return this._ontrack
                                }, set: function (e) {
                                    this._ontrack && (this.removeEventListener("track", this._ontrack), this.removeEventListener("addstream", this._ontrackpoly)), this.addEventListener("track", this._ontrack = e), this.addEventListener("addstream", this._ontrackpoly = function (r) {
                                        r.stream.getTracks().forEach(function (e) {
                                            var t = new Event("track");
                                            t.track = e, t.receiver = {
                                                track: e
                                            }, t.streams = [r.stream], this.dispatchEvent(t)
                                        }.bind(this))
                                    }.bind(this))
                                }
                            })
                        }, shimSourceObject: function (e) {
                            "object" == typeof e && (!e.HTMLMediaElement || "srcObject" in e.HTMLMediaElement.prototype || Object.defineProperty(e.HTMLMediaElement.prototype, "srcObject", {
                                get: function () {
                                    return this.mozSrcObject
                                }, set: function (e) {
                                    this.mozSrcObject = e
                                }
                            }))
                        }, shimPeerConnection: function (s) {
                            var c = n.detectBrowser(s);
                            if ("object" == typeof s && (s.RTCPeerConnection || s.mozRTCPeerConnection)) {
                                s.RTCPeerConnection || (s.RTCPeerConnection = function (e, t) {
                                    if (c.version < 38 && e && e.iceServers) {
                                        for (var r = [], n = 0; n < e.iceServers.length; n++) {
                                            var i = e.iceServers[n];
                                            if (i.hasOwnProperty("urls"))
                                                for (var a = 0; a < i.urls.length; a++) {
                                                    var o = {
                                                        url: i.urls[a]
                                                    };
                                                    0 === i.urls[a].indexOf("turn") && (o.username = i.username, o.credential = i.credential), r.push(o)
                                                } else r.push(e.iceServers[n])
                                        }
                                        e.iceServers = r
                                    }
                                    return new s.mozRTCPeerConnection(e, t)
                                }, s.RTCPeerConnection.prototype = s.mozRTCPeerConnection.prototype, s.mozRTCPeerConnection.generateCertificate && Object.defineProperty(s.RTCPeerConnection, "generateCertificate", {
                                    get: function () {
                                        return s.mozRTCPeerConnection.generateCertificate
                                    }
                                }), s.RTCSessionDescription = s.mozRTCSessionDescription, s.RTCIceCandidate = s.mozRTCIceCandidate), ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function (e) {
                                    var t = s.RTCPeerConnection.prototype[e];
                                    s.RTCPeerConnection.prototype[e] = function () {
                                        return arguments[0] = new("addIceCandidate" === e ? s.RTCIceCandidate : s.RTCSessionDescription)(arguments[0]), t.apply(this, arguments)
                                    }
                                });
                                var e = s.RTCPeerConnection.prototype.addIceCandidate;
                                s.RTCPeerConnection.prototype.addIceCandidate = function () {
                                    return arguments[0] ? e.apply(this, arguments) : (arguments[1] && arguments[1].apply(null), Promise.resolve())
                                };
                                var a = {
                                        inboundrtp: "inbound-rtp",
                                        outboundrtp: "outbound-rtp",
                                        candidatepair: "candidate-pair",
                                        localcandidate: "local-candidate",
                                        remotecandidate: "remote-candidate"
                                    },
                                    r = s.RTCPeerConnection.prototype.getStats;
                                s.RTCPeerConnection.prototype.getStats = function (e, i, t) {
                                    return r.apply(this, [e || null]).then(function (r) {
                                        var t, n;
                                        if (c.version < 48 && (t = r, n = new Map, Object.keys(t).forEach(function (e) {
                                            n.set(e, t[e]), n[e] = t[e]
                                        }), r = n), c.version < 53 && !i) try {
                                            r.forEach(function (e) {
                                                e.type = a[e.type] || e.type
                                            })
                                        } catch (e) {
                                            if ("TypeError" !== e.name) throw e;
                                            r.forEach(function (e, t) {
                                                r.set(t, Object.assign({}, e, {
                                                    type: a[e.type] || e.type
                                                }))
                                            })
                                        }
                                        return r
                                    }).then(i, t)
                                }
                            }
                        }
                    };
                t.exports = {
                    shimOnTrack: i.shimOnTrack,
                    shimSourceObject: i.shimSourceObject,
                    shimPeerConnection: i.shimPeerConnection,
                    shimGetUserMedia: e("./getusermedia")
                }
            }, {
                "../utils": 12,
                "./getusermedia": 10
            }
        ],
        10: [
            function (e, t, r) {
                "use strict";
                var f = e("../utils"),
                    l = f.log;
                t.exports = function (e) {
                    var i = f.detectBrowser(e),
                        a = e && e.navigator,
                        t = e && e.MediaStreamTrack,
                        o = function (e) {
                            return {
                                name: {
                                    InternalError: "NotReadableError",
                                    NotSupportedError: "TypeError",
                                    PermissionDeniedError: "NotAllowedError",
                                    SecurityError: "NotAllowedError"
                                }[e.name] || e.name,
                                message: {
                                    "The operation is insecure.": "The request is not allowed by the user agent or the platform in the current context."
                                }[e.message] || e.message,
                                constraint: e.constraint,
                                toString: function () {
                                    return this.name + (this.message && ": ") + this.message
                                }
                            }
                        },
                        n = function (e, t, r) {
                            var n = function (n) {
                                if ("object" != typeof n || n.require) return n;
                                var i = [];
                                return Object.keys(n).forEach(function (e) {
                                    if ("require" !== e && "advanced" !== e && "mediaSource" !== e) {
                                        var t = n[e] = "object" == typeof n[e] ? n[e] : {
                                            ideal: n[e]
                                        };
                                        if (void 0 === t.min && void 0 === t.max && void 0 === t.exact || i.push(e), void 0 !== t.exact && ("number" == typeof t.exact ? t.min = t.max = t.exact : n[e] = t.exact, delete t.exact), void 0 !== t.ideal) {
                                            n.advanced = n.advanced || [];
                                            var r = {};
                                            "number" == typeof t.ideal ? r[e] = {
                                                min: t.ideal,
                                                max: t.ideal
                                            } : r[e] = t.ideal, n.advanced.push(r), delete t.ideal, Object.keys(t).length || delete n[e]
                                        }
                                    }
                                }), i.length && (n.require = i), n
                            };
                            return e = JSON.parse(JSON.stringify(e)), i.version < 38 && (l("spec: " + JSON.stringify(e)), e.audio && (e.audio = n(e.audio)), e.video && (e.video = n(e.video)), l("ff37: " + JSON.stringify(e))), a.mozGetUserMedia(e, t, function (e) {
                                r(o(e))
                            })
                        };
                    if (a.mediaDevices || (a.mediaDevices = {
                        getUserMedia: function (r) {
                            return new Promise(function (e, t) {
                                n(r, e, t)
                            })
                        }, addEventListener: function () {}, removeEventListener: function () {}
                    }), a.mediaDevices.enumerateDevices = a.mediaDevices.enumerateDevices || function () {
                        return new Promise(function (e) {
                            e([{
                                kind: "audioinput",
                                deviceId: "default",
                                label: "",
                                groupId: ""
                            }, {
                                kind: "videoinput",
                                deviceId: "default",
                                label: "",
                                groupId: ""
                            }])
                        })
                    }, i.version < 41) {
                        var r = a.mediaDevices.enumerateDevices.bind(a.mediaDevices);
                        a.mediaDevices.enumerateDevices = function () {
                            return r().then(void 0, function (e) {
                                if ("NotFoundError" === e.name) return [];
                                throw e
                            })
                        }
                    }
                    if (i.version < 49) {
                        var s = a.mediaDevices.getUserMedia.bind(a.mediaDevices);
                        a.mediaDevices.getUserMedia = function (t) {
                            return s(t).then(function (e) {
                                if (t.audio && !e.getAudioTracks().length || t.video && !e.getVideoTracks().length) throw e.getTracks().forEach(function (e) {
                                    e.stop()
                                }), new DOMException("The object can not be found here.", "NotFoundError");
                                return e
                            }, function (e) {
                                return Promise.reject(o(e))
                            })
                        }
                    }
                    if (!(55 < i.version && "autoGainControl" in a.mediaDevices.getSupportedConstraints())) {
                        var c = function (e, t, r) {
                                t in e && !(r in e) && (e[r] = e[t], delete e[t])
                            },
                            d = a.mediaDevices.getUserMedia.bind(a.mediaDevices);
                        if (a.mediaDevices.getUserMedia = function (e) {
                            return "object" == typeof e && "object" == typeof e.audio && (e = JSON.parse(JSON.stringify(e)), c(e.audio, "autoGainControl", "mozAutoGainControl"), c(e.audio, "noiseSuppression", "mozNoiseSuppression")), d(e)
                        }, t && t.prototype.getSettings) {
                            var p = t.prototype.getSettings;
                            t.prototype.getSettings = function () {
                                var e = p.apply(this, arguments);
                                return c(e, "mozAutoGainControl", "autoGainControl"), c(e, "mozNoiseSuppression", "noiseSuppression"), e
                            }
                        }
                        if (t && t.prototype.applyConstraints) {
                            var u = t.prototype.applyConstraints;
                            t.prototype.applyConstraints = function (e) {
                                return "audio" === this.kind && "object" == typeof e && (e = JSON.parse(JSON.stringify(e)), c(e, "autoGainControl", "mozAutoGainControl"), c(e, "noiseSuppression", "mozNoiseSuppression")), u.apply(this, [e])
                            }
                        }
                    }
                    a.getUserMedia = function (e, t, r) {
                        if (i.version < 44) return n(e, t, r);
                        f.deprecated("navigator.getUserMedia", "navigator.mediaDevices.getUserMedia"), a.mediaDevices.getUserMedia(e).then(t, r)
                    }
                }
            }, {
                "../utils": 12
            }
        ],
        11: [
            function (e, t, r) {
                "use strict";
                var o = e("../utils"),
                    n = {
                        shimLocalStreamsAPI: function (e) {
                            if ("object" == typeof e && e.RTCPeerConnection) {
                                if ("getLocalStreams" in e.RTCPeerConnection.prototype || (e.RTCPeerConnection.prototype.getLocalStreams = function () {
                                    return this._localStreams || (this._localStreams = []), this._localStreams
                                }), "getStreamById" in e.RTCPeerConnection.prototype || (e.RTCPeerConnection.prototype.getStreamById = function (t) {
                                    var r = null;
                                    return this._localStreams && this._localStreams.forEach(function (e) {
                                        e.id === t && (r = e)
                                    }), this._remoteStreams && this._remoteStreams.forEach(function (e) {
                                        e.id === t && (r = e)
                                    }), r
                                }), !("addStream" in e.RTCPeerConnection.prototype)) {
                                    var n = e.RTCPeerConnection.prototype.addTrack;
                                    e.RTCPeerConnection.prototype.addStream = function (t) {
                                        this._localStreams || (this._localStreams = []), -1 === this._localStreams.indexOf(t) && this._localStreams.push(t);
                                        var r = this;
                                        t.getTracks().forEach(function (e) {
                                            n.call(r, e, t)
                                        })
                                    }, e.RTCPeerConnection.prototype.addTrack = function (e, t) {
                                        t && (this._localStreams ? -1 === this._localStreams.indexOf(t) && this._localStreams.push(t) : this._localStreams = [t]), n.call(this, e, t)
                                    }
                                }
                                "removeStream" in e.RTCPeerConnection.prototype || (e.RTCPeerConnection.prototype.removeStream = function (e) {
                                    this._localStreams || (this._localStreams = []);
                                    var t = this._localStreams.indexOf(e);
                                    if (-1 !== t) {
                                        this._localStreams.splice(t, 1);
                                        var r = this,
                                            n = e.getTracks();
                                        this.getSenders().forEach(function (e) {
                                            -1 !== n.indexOf(e.track) && r.removeTrack(e)
                                        })
                                    }
                                })
                            }
                        }, shimRemoteStreamsAPI: function (e) {
                            "object" == typeof e && e.RTCPeerConnection && ("getRemoteStreams" in e.RTCPeerConnection.prototype || (e.RTCPeerConnection.prototype.getRemoteStreams = function () {
                                return this._remoteStreams ? this._remoteStreams : []
                            }), "onaddstream" in e.RTCPeerConnection.prototype || Object.defineProperty(e.RTCPeerConnection.prototype, "onaddstream", {
                                get: function () {
                                    return this._onaddstream
                                }, set: function (e) {
                                    this._onaddstream && (this.removeEventListener("addstream", this._onaddstream), this.removeEventListener("track", this._onaddstreampoly)), this.addEventListener("addstream", this._onaddstream = e), this.addEventListener("track", this._onaddstreampoly = function (e) {
                                        var t = e.streams[0];
                                        if (this._remoteStreams || (this._remoteStreams = []), !(0 <= this._remoteStreams.indexOf(t))) {
                                            this._remoteStreams.push(t);
                                            var r = new Event("addstream");
                                            r.stream = e.streams[0], this.dispatchEvent(r)
                                        }
                                    }.bind(this))
                                }
                            }))
                        }, shimCallbacksAPI: function (e) {
                            if ("object" == typeof e && e.RTCPeerConnection) {
                                var t = e.RTCPeerConnection.prototype,
                                    i = t.createOffer,
                                    a = t.createAnswer,
                                    o = t.setLocalDescription,
                                    s = t.setRemoteDescription,
                                    c = t.addIceCandidate;
                                t.createOffer = function (e, t) {
                                    var r = 2 <= arguments.length ? arguments[2] : e,
                                        n = i.apply(this, [r]);
                                    return t ? (n.then(e, t), Promise.resolve()) : n
                                }, t.createAnswer = function (e, t) {
                                    var r = 2 <= arguments.length ? arguments[2] : e,
                                        n = a.apply(this, [r]);
                                    return t ? (n.then(e, t), Promise.resolve()) : n
                                };
                                var r = function (e, t, r) {
                                    var n = o.apply(this, [e]);
                                    return r ? (n.then(t, r), Promise.resolve()) : n
                                };
                                t.setLocalDescription = r, r = function (e, t, r) {
                                    var n = s.apply(this, [e]);
                                    return r ? (n.then(t, r), Promise.resolve()) : n
                                }, t.setRemoteDescription = r, r = function (e, t, r) {
                                    var n = c.apply(this, [e]);
                                    return r ? (n.then(t, r), Promise.resolve()) : n
                                }, t.addIceCandidate = r
                            }
                        }, shimGetUserMedia: function (e) {
                            var n = e && e.navigator;
                            n.getUserMedia || (n.webkitGetUserMedia ? n.getUserMedia = n.webkitGetUserMedia.bind(n) : n.mediaDevices && n.mediaDevices.getUserMedia && (n.getUserMedia = function (e, t, r) {
                                n.mediaDevices.getUserMedia(e).then(t, r)
                            }.bind(n)))
                        }, shimRTCIceServerUrls: function (e) {
                            var a = e.RTCPeerConnection;
                            e.RTCPeerConnection = function (e, t) {
                                if (e && e.iceServers) {
                                    for (var r = [], n = 0; n < e.iceServers.length; n++) {
                                        var i = e.iceServers[n];
                                        !i.hasOwnProperty("urls") && i.hasOwnProperty("url") ? (o.deprecated("RTCIceServer.url", "RTCIceServer.urls"), (i = JSON.parse(JSON.stringify(i))).urls = i.url, delete i.url, r.push(i)) : r.push(e.iceServers[n])
                                    }
                                    e.iceServers = r
                                }
                                return new a(e, t)
                            }, e.RTCPeerConnection.prototype = a.prototype, Object.defineProperty(e.RTCPeerConnection, "generateCertificate", {
                                get: function () {
                                    return a.generateCertificate
                                }
                            })
                        }
                    };
                t.exports = {
                    shimCallbacksAPI: n.shimCallbacksAPI,
                    shimLocalStreamsAPI: n.shimLocalStreamsAPI,
                    shimRemoteStreamsAPI: n.shimRemoteStreamsAPI,
                    shimGetUserMedia: n.shimGetUserMedia,
                    shimRTCIceServerUrls: n.shimRTCIceServerUrls
                }
            }, {
                "../utils": 12
            }
        ],
        12: [
            function (e, t, r) {
                "use strict";
                var n = !0,
                    i = !0,
                    c = {
                        disableLog: function (e) {
                            return "boolean" != typeof e ? new Error("Argument type: " + typeof e + ". Please use a boolean.") : (n = e) ? "adapter.js logging disabled" : "adapter.js logging enabled"
                        }, disableWarnings: function (e) {
                            return "boolean" != typeof e ? new Error("Argument type: " + typeof e + ". Please use a boolean.") : (i = !e, "adapter.js deprecation warnings " + (e ? "disabled" : "enabled"))
                        }, log: function () {
                            if ("object" == typeof window) {
                                if (n) return;
                                "undefined" != typeof console && "function" == typeof console.log && console.log.apply(console, arguments)
                            }
                        }, deprecated: function (e, t) {
                            i && console.warn(e + " is deprecated, please use " + t + " instead.")
                        }, extractVersion: function (e, t, r) {
                            var n = e.match(t);
                            return n && n.length >= r && parseInt(n[r], 10)
                        }, detectBrowser: function (e) {
                            var t = e && e.navigator,
                                r = {
                                    browser: null,
                                    version: null
                                };
                            if (void 0 === e || !e.navigator) return r.browser = "Not a browser.", r;
                            if (t.mozGetUserMedia) r.browser = "firefox", r.version = this.extractVersion(t.userAgent, /Firefox\/(\d+)\./, 1);
                            else if (t.webkitGetUserMedia)
                                if (e.webkitRTCPeerConnection) r.browser = "chrome", r.version = this.extractVersion(t.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
                                else {
                                    if (!t.userAgent.match(/Version\/(\d+).(\d+)/)) return r.browser = "Unsupported webkit-based browser with GUM support but no WebRTC support.", r;
                                    r.browser = "safari", r.version = this.extractVersion(t.userAgent, /AppleWebKit\/(\d+)\./, 1)
                                } else if (t.mediaDevices && t.userAgent.match(/Edge\/(\d+).(\d+)$/)) r.browser = "edge", r.version = this.extractVersion(t.userAgent, /Edge\/(\d+).(\d+)$/, 2);
                            else {
                                if (!t.mediaDevices || !t.userAgent.match(/AppleWebKit\/(\d+)\./)) return r.browser = "Not a supported browser.", r;
                                r.browser = "safari", r.version = this.extractVersion(t.userAgent, /AppleWebKit\/(\d+)\./, 1)
                            }
                            return r
                        }, shimCreateObjectURL: function (e) {
                            var t = e && e.URL;
                            if ("object" == typeof e && e.HTMLMediaElement && "srcObject" in e.HTMLMediaElement.prototype) {
                                var r = t.createObjectURL.bind(t),
                                    n = t.revokeObjectURL.bind(t),
                                    i = new Map,
                                    a = 0;
                                t.createObjectURL = function (e) {
                                    if ("getTracks" in e) {
                                        var t = "polyblob:" + ++a;
                                        return i.set(t, e), c.deprecated("URL.createObjectURL(stream)", "elem.srcObject = stream"), t
                                    }
                                    return r(e)
                                }, t.revokeObjectURL = function (e) {
                                    n(e), i.delete(e)
                                };
                                var o = Object.getOwnPropertyDescriptor(e.HTMLMediaElement.prototype, "src");
                                Object.defineProperty(e.HTMLMediaElement.prototype, "src", {
                                    get: function () {
                                        return o.get.apply(this)
                                    }, set: function (e) {
                                        return this.srcObject = i.get(e) || null, o.set.apply(this, [e])
                                    }
                                });
                                var s = e.HTMLMediaElement.prototype.setAttribute;
                                e.HTMLMediaElement.prototype.setAttribute = function () {
                                    return 2 === arguments.length && "src" === ("" + arguments[0]).toLowerCase() && (this.srcObject = i.get(arguments[1]) || null), s.apply(this, arguments)
                                }
                            }
                        }
                    };
                t.exports = {
                    log: c.log,
                    deprecated: c.deprecated,
                    disableLog: c.disableLog,
                    disableWarnings: c.disableWarnings,
                    extractVersion: c.extractVersion,
                    shimCreateObjectURL: c.shimCreateObjectURL,
                    detectBrowser: c.detectBrowser.bind(c)
                }
            }, {}
        ]
    }, {}, [2])(2)
});